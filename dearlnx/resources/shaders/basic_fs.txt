#version 330 core

in VS_OUT {
  float time;
} fs_in;

out vec4 color;
uniform float resx;
uniform float resy;
uniform sampler2D sampler0;
uniform vec3 camheading;
uniform vec3 camright;
uniform vec3 camup;
uniform vec3 campos;

float dfSphere(vec3 p, float s) {
  return length(p) - s;
}

float sdPlane( vec3 p, vec4 n )
{
  // n must be normalized
  return dot(p,n.xyz) + n.w;
}

float sdSphere( vec3 p, float s )
{
  return length(p)-s;
}

float sdTorus( vec3 p, vec2 t )
{
  vec2 q = vec2(length(p.xz)-t.x,p.y);
  return length(q)-t.y;
}

float repeatedSpheres(vec3 p) {
    p.x = mod(p.x, 10) - 5;
    p.z = mod(p.z, 10) - 5;
    return sdTorus(p, vec2( 2, 1 ) );
}

float mb(vec3 p,float size) {
return 0.5-atan(length(p)-size)/3.141516;
}

float mb2d(float x){
x = -clamp(x,0.0001,0.78);
return (tan((x-0.5)*3.141516)+1.0);
}

float length8( vec2 v )
{
  float vx = v.x * v.x * v.x * v.x * v.x * v.x * v.x * v.x;
  float vy = v.y * v.y * v.y * v.y * v.y * v.y * v.y * v.y;
  return pow( vx + vy, 1.0/8.0 );
}

float sdTorus82( vec3 p, vec2 t )
{
  vec2 q = vec2(length(p.xz)-t.x,p.y);
  return length8(q)-t.y;
}

float udRoundBox( vec3 p, vec3 b, float r )
{
  return length(max(abs(p)-b,0.0))-r;
}

float sdBox( vec3 p, vec3 b )
{
  vec3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

float smin( float a, float b, float k )
{
    a = pow( a, k ); b = pow( b, k );
    return pow( (a*b)/(a+b), 1.0/k );
}

float drawD( vec3 p )
{
  float curve = max( sdTorus82( p, vec2(5.0, 1.0) ), sdPlane( p, vec4( -1.0, 0.0, 0.0, 0.0 ) ) );
  float bar = udRoundBox( p - vec3(-0.75,0.0,0.0), vec3(0.75, 0.75, 5.75), 0.25 );
  return min( bar, curve );
}

float drawE( vec3 p )
{
  float bigBar = udRoundBox( p - vec3(0.0,0.0,0.0), vec3(0.75, 0.75, 5.75), 0.25 );
  float lbar1 = udRoundBox( p - vec3(2.75,0.0,0.0), vec3(2.75, 0.75, 0.75), 0.25 );
  float lbar2 = udRoundBox( p - vec3(2.75,0.0,5.0), vec3(2.75, 0.75, 0.75), 0.25 );
  float lbar3 = udRoundBox( p - vec3(2.75,0.0,-5.0), vec3(2.75, 0.75, 0.75), 0.25 );
  
  return min( min( min( bigBar, lbar1 ), lbar2 ), lbar3 );
}

vec3 rotateY(float a, vec3 v)
{
   return vec3(cos(a) * v.x + sin(a) * v.z, v.y, cos(a) * v.z - sin(a) * v.x);
}

vec3 rotateX(vec3 p, float a)
{
    float sa = sin(a);
    float ca = cos(a);
    return vec3(p.x, ca*p.y - sa*p.z, sa*p.y + ca*p.z);
}

float drawA( vec3 p )
{
  p -= vec3( 0.0, 0.0, -1.0 );
  //float bigBar = udRoundBox( rotateY( 0, p ) - vec3( 0, 0.0, 0.0), vec3(0.75, 0.75, 10.75), 0.25 );
  float bigBar2 = max( udRoundBox( rotateY( 0.5027, p ) - vec3( 2.5, 0.0, 0.0), vec3(0.75, 0.75, 6.0), 0.25 ), sdPlane( p, vec4(-1.0, 0.0, 0.0, 0.0) ) );
  float bigBar3 = max( udRoundBox( rotateY( -0.5027, p ) - vec3( -2.5, 0.0, 0.0), vec3(0.75, 0.75, 6.0), 0.25 ), sdPlane( p, vec4(1.0, 0.0, 0.0, 0.0) ) );
  float bigBar4 = udRoundBox( p - vec3( 0, 0.0, 0.25), vec3(3.0, 0.75, 0.75), 0.25 );
  return min( min( bigBar2, bigBar3 ), bigBar4 );
}

float drawR( vec3 p )
{
  float curve = max( sdTorus82( p - vec3( 1.0, 0.0, 2.0 ), vec2(3.0, 1.0) ), sdPlane( p, vec4( -1.0, 0.0, 0.0, 0.0 ) ) );
  float bar = udRoundBox( p - vec3(-0.75,0.0,0.0), vec3(0.75, 0.75, 5.75), 0.25 );
  float bbar = max( max( udRoundBox( rotateY( 0.75, p ) - vec3(-0.75,0.0,0.0), vec3(0.75, 0.75, 10.0), 0.25 ), sdPlane( p + vec3(0.0,0.0,6.0), vec4(0.0, 0.0, -1.0, 0.0) ) ), sdPlane( p + vec3(1.0,0.0,0.0), vec4( -1.0, 0.0, 0.0, 0.0) ) );
  return min( min( bar, curve ), bbar );
}

float drawDEAR( vec3 p )
{
  p = rotateX( p, 1.5707 );
  return min( min( min( drawD( p ), drawE( p - vec3( 10.0, 0.0, 0.0 ) ) ), drawA( p - vec3( 25.0, 0.0, 0.0 ) ) ), drawR( p - vec3( 35.0, 0.0, 0.0 ) ) );
}

float dist(vec3 rayPos, vec3 objPos) {
  vec3 p = rayPos - objPos;
  //return min( dfSphere(p, 16), sdPlane( rayPos, vec4(0.0,1.0,0.0,0.0) ) );

  //return min( drawE( rayPos ), sdPlane( rayPos, vec4( 0.0, 1.0, 0.0, 0.0 ) ) );
  //return min( min( min( drawD( rayPos ), drawE( rayPos - vec3( 10.0, 0.0, 0.0 ) ) ), drawA( rayPos - vec3( 25.0, 0.0, 0.0 ) ) ), drawR( rayPos - vec3( 35.0, 0.0, 0.0 ) ) );
  
  //return drawR( rayPos );
  
  //return sdPlane( rayPos, vec4(0.0,1.0,0.0,0.0) );
    float popo = repeatedSpheres( rayPos );
    //float pipi = sdPlane( rayPos, vec4(0.0,1.0,0.0,0.0));
     //return mb2d( popo + pipi );
	return popo;
  //return drawDEAR( rayPos );
}

float doLight(vec3 vd, vec3 p, vec3 n, vec3 lightPos) {
  vec3 ld = normalize(lightPos - p);      
  float specular = pow(clamp(dot(vd, reflect(ld, n)), 0, 1), 16) * 30 / length(lightPos - p);
  return specular + 0.25 * clamp(dot(ld, n), 0, 1);
}

void main() {
  //float x = (gl_FragCoord.x) / resx*2.0 - 1.0;
  //float y = (gl_FragCoord.y) / resy*2.0 - 1.0;
  float aspectratio = resx/resy;
  //y *= aspectratio;
  
  vec2 qq = gl_FragCoord.xy/vec2(resx,resy);
  vec2 pp = -1.0+2.0*qq;
  //pp.x *= resx/resy;
  float x = pp.x;
  float y = pp.y;

  float t = fs_in.time;

  vec3 v0 = vec3(x, y, 0); // ray intersection with view plane
  //vec3 p = vec3(0, 0.0, -2); // camera position
  //vec3 vd = normalize(v0 - p); // ray direction
	
	vec3 p = campos;
	vec3 vd = camheading;
	vd += camright * tan(30.0) * x * aspectratio;
	vd += camup * tan(30.0) * y;
	vd = normalize(vd);
	vec3 rd = normalize(camheading * 1.67 + camright * x * aspectratio + camup * y);
	vd = rd;
	
  vec3 spherePos = vec3(0, 10.0*cos(t*1.7), 50.0 + 10.0 * sin(t *1.7));
  vec3 lightPos = vec3(70 * cos(fs_in.time * 1.7), 70 * sin(fs_in.time * 0.35), 70 * sin(fs_in.time));

  // epsilon vectors used for calculating surface normals
  float e = 0.001;    
  vec3 dx = vec3(e, 0, 0);
  vec3 dy = vec3(0, e, 0);
  vec3 dz = vec3(0, 0, e);


  // ray marching loop
  bool hit = false;
  float maxZ = 300.0;

  p += vd;
  while (!hit && length(p) < maxZ) {
    float d = dist(p, spherePos);

    if (d <= 0.05) {
      hit = true;
    } else {
      p += vd * d;
    }
  }

  // shading 
  if (hit) {
		
    vec3 n = normalize(vec3(
                            dist(p + dx, spherePos) - dist(p - dx, spherePos),
                            dist(p + dy, spherePos) - dist(p - dy, spherePos),
                            dist(p + dz, spherePos) - dist(p - dz, spherePos)
                            ));

    float light = doLight(vd, p, n, lightPos);

    float fog = clamp(pow(1.1 * p.z / maxZ, 2), 0, 1);
    vec3 fogcol = vec3(0.7, 0.2, 0.2);
		
    color = vec4(mix(vec3(light), fogcol, fog), 1);
    //color = vec4( 0.5-vec3(p.z,p.z,p.z)/maxZ, 1 );
		
  } else {
    color = vec4(1.0, 1.0, 1.0, 1);
  }

}
